#!/bin/sh

###-------------------
if [ $# -ge 1 ] && [ "$1" == "--help" ]; then
	echo ''
	echo "Simply running $0 will set things up to run the various ASUX.org tools"
	echo ''
	echo "You can also use this tool to configure some run-time settings .. (at any time\!).  You can pretend to have no internet connection (a.k.a. offline).  You can also pretent Not to have maven (a.k.a. local)"
	echo ''
	echo "Usage: $0 --[no-]intenet | --offline | --online"
	echo "Usage: $0 --[no-]maven | --[no-]local"
	exit 0
fi

###=====================================================================
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
###=====================================================================

if [ $# -ge 1 ]; then
	SETTINGSCMD="$1"
	#___ echo "SETTINGSCMD='$SETTINGSCMD'"

	###____________________
	NOINTERNETFLAGFILENAME="/tmp/org.ASUX--no-internet";
	NOMAVENFLAGFILENAME="/tmp/org.ASUX--no-maven";
	NOUBERJARFLAGFILENAME="/tmp/org.ASUX--no-uberjar";

	###____________________
	if [ "$SETTINGSCMD" == "--offline" ] || [ "$SETTINGSCMD" == "--no-internet" ]; then
		touch "${NOINTERNETFLAGFILENAME}"
		echo ''
		echo "No-Internet: going forward.. .. the scripts within ASUX.org projects will __NOT__ access internet"
	fi
	if [ "$SETTINGSCMD" == "--online" ] || [ "$SETTINGSCMD" == "--internet" ]; then
		\rm -f "${NOINTERNETFLAGFILENAME}"
		echo ''
		echo "yeah\! internet-access allowed by scripts"
	fi

	###____________________
	if [ "$SETTINGSCMD" == "--no-maven" ] || [ "$SETTINGSCMD" == "--local" ]; then
		touch "${NOMAVENFLAGFILENAME}"
		echo ''
		echo "No-Maven: going forward.. .. the scripts within ASUX.org projects will __NOT__ use Maven command"
	fi
	if [ "$SETTINGSCMD" == "--maven" ] || [ "$SETTINGSCMD" == "--no-local" ]; then
		\rm -f "${NOMAVENFLAGFILENAME}"
		echo ''
		echo "yeah\! 'mvn' command can be executed"
	fi

	###____________________
	if [ "$SETTINGSCMD" == "--no-uberjar" ]; then
		touch "${NOUBERJARFLAGFILENAME}"
		echo ''
		echo "No-UBERJar: going forward.. .. the JAVA-runtime will __NOT__ use UBERJar in CLASSPATH"
	fi
	if [ "$SETTINGSCMD" == "--uberjar" ]; then
		\rm -f "${NOUBERJARFLAGFILENAME}"
		echo ''
		echo "yeah\! UBERJar in CLASSPATH allowed\!"
	fi

	exit 0
fi

###=====================================================================
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
###=====================================================================

###-------------------
### The following line did NOT work on Windows
# CmdPath="${BASH_SOURCE[0]}"

CmdPath="$0"
# echo $CmdPath
SCRIPTFLDR_RELATIVE="$(dirname "$CmdPath")"
SCRIPTFULLFLDRPATH="$( cd "$(dirname "$0")" ; pwd -P )"
#___ echo ${SCRIPTFULLFLDRPATH}

###-------------------
orgASUXFldr=`pwd`
#__ echo "orgASUXFldr = '${orgASUXFldr}''"

if [ "${SCRIPTFLDR_RELATIVE}" != "." ]; then
	orgASUXFldr="${SCRIPTFULLFLDRPATH}"
	>&2 echo ' '
	>&2 echo "ok.  I should assume you are an experienced-enough user of BASH."
	>&2 echo "If not, you are the user I hate to support .. or, to provide help/advice."
	sleep 5
	>&2 echo ' '
	>&2 echo "Stop this script immediately.. .. if 'git clone https://github.com/org-asux/org.ASUX.git' command did Not create the ${orgASUXFldr} folder .."
	>&2 echo ' '
	sleep 5
else
	echo '[y] You are following instructions'
	sleep 1
fi

###-------------------
### Check to see if Node.JS (Specifically, the program 'node') exists - in the path.

command -v node
if [ $? -ne 0 ]; then
	>&2 echo ' '
	>&2 echo ' '
	>&2 echo '*sigh* You have _NOTHING_ on this server :-('
	>&2 echo 'We have to do a lot of install.. unfortunately!'
	sleep 5
	>&2 echo ' '
	>&2 echo 'Node.JS (node) is not installed.  You _HAVE_ to do it manually.'
	>&2 echo '!!! ATTENTION !!! Unfortunately, you have to install "node" MANUALLY.'
	>&2 echo 'Enter the following command __AS-IS__ (incl. the DOT/PERIOD) on the Bash/Shell command-line prompt :-'
	>&2 echo ' '
	>&2 echo ' '
	>&2 echo "       .    ${orgASUXFldr}/bin/installNodeOnAWSEC2Instance.sh"
	>&2 echo ' '
	>&2 echo ' '
	sleep 7
	>&2 echo '!!! ATTENTION !!! .. .. rerun this "install" again .. After installing node (as shown above)'
	>&2 echo ' '
	exit 1
else
	echo "[y] verified that Node.JS (node) is installed"
	sleep 1
fi

###-------------------
### Copy ${orgASUXFldr} into path - if its NOT in it already

command -v asux.js
if [ $? -ne 0 ]; then
	>&2 echo ' '
	>&2 echo "${orgASUXFldr} is Not in the path.  I can _TRY_ to append it to your path (in .bashrc)."
	>&2 echo 'If .. you do _NOT_ want this script to change your .bashrc, press Cntl-C Now.. ..!!!'
	>&2 echo ' '
	read -p 'Otherwise press ENTER key to continue' BLACKHOLEVARIABLE
	echo ' ' >> ~/.bashrc
	echo 'export PATH=.:"'${orgASUXFldr}'":${PATH}' >> ~/.bashrc
	>&2 echo 'Done!'
	>&2 echo ' '
	sleep 2
	>&2 echo "ATTENTION! You have 2 options now."
	>&2 echo "		(1) Logout and Login again.      .. Or .."
	>&2 echo "		(2) Enter the following command __AS-IS__ on the Bash/Shell command-line prompt :-"
	>&2 echo '				export PATH='${orgASUXFldr}':${PATH}'
	>&2 echo ' '
	sleep 2
	>&2 echo 'ATTENTION !!! After choosing an option above.. .. rerun this "install" again (to double-check everything)'
	>&2 echo ' '
	exit 1
else
	echo '[y] verified that your org.ASUX project is in the PATH ..and can be used in any folder!'
	sleep 1
fi

###-------------------
### The following symbolic-link is important for running compile and regression-tests of the org.ASUX packages
mkdir -p /mnt/development > /dev/null 2>&1
ln -s ${orgASUXFldr}/.. /mnt/development/src > /dev/null 2>&1
### This above link is needed by ${orgASUXFldr}/compile.sh
### compile.sh _ASSUMES_ the path /mnt/development/src/org.ASUX as === ${orgASUXFldr}
if [ ! -e /mnt/development/src ]; then echo '[x] ADVANCED-user ONLY: /mnt/development/src could Not created.'; fi

###-------------------
LOGFILE=/tmp/org.ASUX-1st-run-logs.txt
echo 'completing install.. .. takes a couple of seconds only..'

node ${orgASUXFldr}/asux.js install > ${LOGFILE} 2>&1
if [ $? -eq 0 ]; then
	>&2 echo ' '
	>&2 echo ' '
	>&2 echo "You are now all ready to run commands!  Try entering the following example:-"
	>&2 echo ' '
	>&2 echo "			asux.js yaml read 'paths,/pet' --delimiter , -i ${orgASUXFldr}/test/inputs/nano.yaml -o - "
	>&2 echo ' '
	>&2 echo ' '
else
	>&2 echo "Something went wrong. Please look at the bottom of the file ${LOGFILE}"
fi

### EoScript

